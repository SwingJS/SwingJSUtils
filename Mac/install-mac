#!/bin/bash

curl -O https://raw.githubusercontent.com/SwingJS/SwingJSUtils/master/latestj2s
NEWESTJ2S=`cat latestj2s`
rm latestj2s

if [ $1 == "no-swingjs"]
then
    if [$2 == "latest"]
    then
        if [ ! -z "$3" ]
        then
            cd $3
        fi

        if [ -d "Eclipse.app" ]
        then
            echo "Eclipse is already installed. Installing latest plugin"
            # # cd Eclipse.app/Contents/Eclipse/dropins
            # CURRENTJ2S=$(ls *.zip)
            # CURRENTJ2S=${CURRENTJ2S::-4}
            # cd ../../../../
            # if [ $CURRENTJ2S != $NEWESTJ2S ]
            # then
            rm -rf Eclipse.app/Contents/Eclipse/dropins/*
            curl -LOk https://github.com/BobHanson/java2script/raw/swingjs/releases/latest/latest.zip
            mv latest.zip $NEWESTJ2S.zip
            cp $NEWESTJ2S.zip Eclipse.app/Contents/Eclipse/dropins/$NEWESTJ2S.zip
            unzip $NEWESTJ2S.zip -d Eclipse.app/Contents/Eclipse/dropins/
            rm $NEWESTJ2S.zip
            # fi
            [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
        fi

        # Download
        BINARY="eclipse-jee-neon-3-macosx-cocoa-x86_64.tar.gz"
        APP="Eclipse.app"
        echo $BINARY
        echo $APP
        if [ -d "$APP" ]; then
            rm -rf $APP
        fi

        if [ ! -f "$BINARY" ]; then
            curl -O http://eclipse.mirror.rafal.ca/technology/epp/downloads/release/neon/3/eclipse-jee-neon-3-macosx-cocoa-x86_64.tar.gz
        fi
        curl -LOk https://github.com/BobHanson/java2script/releases/download/$NEWESTJ2S/$NEWESTJ2S.zip
        tar xvf eclipse-jee-neon-3-macosx-cocoa-x86_64.tar.gz
        rm eclipse-jee-neon-3-macosx-cocoa-x86_64.tar.gz
        cp $NEWESTJ2S.zip Eclipse.app/Contents/Eclipse/dropins/$NEWESTJ2S.zip
        unzip $NEWESTJ2S.zip -d Eclipse.app/Contents/Eclipse/dropins/
        rm $NEWESTJ2S.zip
    else #specify a version of the plugins [in argv, this will be argument #2, and can be invoked via $2]
        if [ ! -z "$3" ]
        then
            cd $3
        fi

        if [ -d "Eclipse.app" ]
        then
            echo "Eclipse is already installed. Checking if plugins need to be changed"
            cd Eclipse.app/Contents/Eclipse/dropins
            CURRENTJ2S=$(ls *.zip)
            CURRENTJ2S=${CURRENTJ2S::-4}
            cd ../../../../
            if [ $CURRENTJ2S != $2 ]
            then
                rm -rf Eclipse.app/Contents/Eclipse/dropins/*
                curl -LOk https://github.com/BobHanson/java2script/raw/swingjs/releases/$2/$2.zip
                cp $2.zip Eclipse.app/Contents/Eclipse/dropins/$2.zip
                unzip $2.zip -d Eclipse.app/Contents/Eclipse/dropins/
                rm $2.zip
            fi
            [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
        fi

        # Download
        BINARY="eclipse-jee-neon-3-macosx-cocoa-x86_64.tar.gz"
        APP="Eclipse.app"
        echo $BINARY
        echo $APP
        if [ -d "$APP" ]; then
            rm -rf $APP
        fi

        if [ ! -f "$BINARY" ]; then
            curl -O http://eclipse.mirror.rafal.ca/technology/epp/downloads/release/neon/3/eclipse-jee-neon-3-macosx-cocoa-x86_64.tar.gz
        fi
        curl -LOk https://github.com/BobHanson/java2script/raw/swingjs/releases/$2/$2.zip
        tar xvf eclipse-jee-neon-3-macosx-cocoa-x86_64.tar.gz
        rm eclipse-jee-neon-3-macosx-cocoa-x86_64.tar.gz
        cp $2.zip Eclipse.app/Contents/Eclipse/dropins/$2.zip
        unzip $2.zip -d Eclipse.app/Contents/Eclipse/dropins/
        rm $2.zip
    fi
fi
